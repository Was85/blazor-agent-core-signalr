@page "/"
@inject WebClientCore.Services.IResourceRegistry Registry
@using WebClientCore.State
@inject WebClientCore.Services.IAgentBridge Bridge

<fluent-card class="dashboard-header">
    <div class="d-flex align-items-center justify-content-between">
        <h1 class="dashboard-title m-0">Agent Core Dashboard</h1>
        <div class="d-flex gap-3 align-items-center">
            <span class="text-muted">Last update: <strong>@FormatTimeAgo(GetLatestUpdate())</strong></span>
            <fluent-badge appearance="accent">Agents: @(snapshot?.Agents.Count ?? 0)</fluent-badge>
            <fluent-badge appearance="neutral">Cities: @(snapshot?.Cities.Count ?? 0)</fluent-badge>
        </div>
    </div>
    <div class="row g-3 mt-3">
        <div class="col-12 col-lg-6">
            <FluentTextField Placeholder="Search agents by name or ID" @bind-Value="searchAgents" Style="width:100%" />
        </div>
        <div class="col-12 col-lg-6">
            <FluentTextField Placeholder="Search cities by name or ID" @bind-Value="searchCities" Style="width:100%" />
        </div>
    </div>
    
</fluent-card>

<div class="row g-4 mb-4">
    <div class="col-12 col-lg-6">
        <div class="form-floating">
            <input @bind="searchAgents" class="form-control" id="searchAgents" placeholder="Search agents..." />
            <label for="searchAgents"><i class="bi bi-search me-2"></i>Search agents by name or ID</label>
        </div>
    </div>
    <div class="col-12 col-lg-6">
        <div class="form-floating">
            <input @bind="searchCities" class="form-control" id="searchCities" placeholder="Search cities..." />
            <label for="searchCities"><i class="bi bi-search me-2"></i>Search cities by name or ID</label>
        </div>
    </div>
</div>

@if (snapshot is null)
{
    <div class="alert alert-secondary">Waiting for data...</div>
}
else
{
    <div class="row g-4">
        <div class="col-12 col-lg-6">
            <fluent-card class="h-100 shadow p-0" style="display:block;">
                <div class="d-flex justify-content-between align-items-center p-3 border-bottom" style="background:var(--neutral-layer-2);border-top-left-radius:16px;border-top-right-radius:16px;">
                    <h5 class="mb-0 d-flex align-items-center"><i class="bi bi-robot me-2"></i>Agents</h5>
                    <fluent-badge appearance="neutral">@FilteredAgents.Count()</fluent-badge>
                </div>
                <div class="p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th class="border-0 fw-semibold">
                                        <i class="bi bi-person-badge me-2"></i>Name
                                    </th>
                                    <th class="border-0 fw-semibold">
                                        <i class="bi bi-tag me-2"></i>Agent ID
                                    </th>
                                    <th class="border-0 fw-semibold text-end">
                                        <i class="bi bi-clock me-2"></i>Last Seen
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var a in FilteredAgents)
                                {
                                    <tr class="table-row-animated">
                                        <td class="py-3">
                                            <div class="d-flex align-items-center">
                                                <div class="live-dot me-3"></div>
                                                <span class="fw-semibold text-primary">@a.Name</span>
                                            </div>
                                        </td>
                                        <td class="py-3">
                                            <code class="bg-light text-dark px-2 py-1 rounded">@a.AgentId</code>
                                        </td>
                                        <td class="py-3 text-end">
                                            <span class="text-muted" title='@a.LastSeen.ToString("u")'>
                                                <i class="bi bi-clock-history me-1"></i>@FormatTimeAgo(a.LastSeen)
                                            </span>
                                        </td>
                                    </tr>
                                }
                                @if (!FilteredAgents.Any())
                                {
                                    <tr>
                                        <td colspan="3" class="text-center text-muted py-5">
                                            <i class="bi bi-robot display-6 mb-3 opacity-25"></i>
                                            <div>No agents match the filter</div>
                                            @if (!string.IsNullOrEmpty(searchAgents))
                                            {
                                                <small class="text-muted">Try adjusting your search criteria</small>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </fluent-card>
        </div>

        <div class="col-12 col-lg-6">
            <fluent-card class="h-100 shadow p-0" style="display:block;">
                <div class="d-flex justify-content-between align-items-center p-3 border-bottom" style="background:var(--neutral-layer-2);border-top-left-radius:16px;border-top-right-radius:16px;">
                    <h5 class="mb-0 d-flex align-items-center"><i class="bi bi-geo-alt me-2"></i>Cities</h5>
                    <fluent-badge appearance="accent">@FilteredCities.Count()</fluent-badge>
                </div>
                <div class="p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th class="border-0 fw-semibold">
                                        <i class="bi bi-building me-2"></i>City
                                    </th>
                                    <th class="border-0 fw-semibold text-end">
                                        <i class="bi bi-thermometer me-2"></i>Temperature
                                    </th>
                                    <th class="border-0 fw-semibold">
                                        <i class="bi bi-robot me-2"></i>Agent
                                    </th>
                                    <th class="border-0 fw-semibold text-end">
                                        <i class="bi bi-arrow-repeat me-2"></i>Updated
                                    </th>
                                    <th class="border-0 fw-semibold text-end">
                                        <i class="bi bi-eye me-2"></i>Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var c in FilteredCities)
                                {
                                    var updated = c.LastUpdated;
                                    <tr class="table-row-animated">
                                        <td class="py-3">
                                            <div>
                                                <div class="fw-semibold text-success">@c.Name</div>
                                                <small class="text-muted">
                                                    <code class="bg-light text-muted px-1 rounded">@c.CityId</code>
                                                </small>
                                            </div>
                                        </td>
                                        <td class="py-3 text-end">
                                            <span class="badge fs-6 temp-badge @(TempClass(c.TemperatureC))">
                                                <i class="bi bi-thermometer-half me-1"></i>@c.TemperatureC.ToString("0.0")Â°C
                                            </span>
                                        </td>
                                        <td class="py-3">
                                            <code class="bg-primary text-white px-2 py-1 rounded">@c.AgentId</code>
                                        </td>
                                        <td class="py-3 text-end">
                                            @if (updated is null)
                                            {
                                                <span class="text-muted">
                                                    <i class="bi bi-dash-circle me-1"></i>Never
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted" title='@updated.Value.ToString("u")'>
                                                    <i class="bi bi-clock-history me-1"></i>@FormatTimeAgo(updated)
                                                </span>
                                            }
                                        </td>
                                        <td class="py-3 text-end">
                                            <fluent-button appearance="accent" size="small" @onclick="() => ShowDetailsAsync(c.AgentId, c.CityId)">
                                                Details
                                            </fluent-button>
                                        </td>
                                    </tr>
                                }
                                @if (!FilteredCities.Any())
                                {
                                    <tr>
                                        <td colspan="5" class="text-center text-muted py-5">
                                            <i class="bi bi-geo-alt display-6 mb-3 opacity-25"></i>
                                            <div>No cities match the filter</div>
                                            @if (!string.IsNullOrEmpty(searchCities))
                                            {
                                                <small class="text-muted">Try adjusting your search criteria</small>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </fluent-card>
        </div>
    </div>
}

@* Modal *@
@if (modalOpen)
{
    <fluent-dialog modal="true" style="--dialog-width: 720px; --dialog-max-width: 90vw;">
        <div class="p-3">
            <h3 class="mb-2">City details</h3>
            @if (!string.IsNullOrEmpty(modalSuccess))
            {
                <fluent-alert appearance="success" class="mb-2">@modalSuccess</fluent-alert>
            }
            @if (loadingModal)
            {
                <div class="d-flex flex-column align-items-center py-4">
                    <fluent-progress-ring></fluent-progress-ring>
                    <div class="text-muted mt-2">Loading...</div>
                </div>
            }
            else if (!string.IsNullOrEmpty(modalError))
            {
                <fluent-alert appearance="error">@modalError</fluent-alert>
            }
            else if (modalHtml is not null)
            {
                @((MarkupString)(modalHtml ?? string.Empty))
            }
            else
            {
                <div class="text-muted">No content received.</div>
            }
        </div>
        <div class="d-flex justify-content-end gap-2 p-3">
            <fluent-button appearance="outline" @onclick="CloseModal">Close</fluent-button>
            <fluent-button appearance="accent" disabled="@(loadingSave || !string.IsNullOrEmpty(modalSuccess))" @onclick="PerformSaveAsync">
                @if (loadingSave)
                {<fluent-progress-ring size="small" class="me-2"></fluent-progress-ring>}
                Save
            </fluent-button>
        </div>
    </fluent-dialog>
}

@code {
    private RegistrySnapshot? snapshot;
    private System.Timers.Timer? _tick;
    private string searchAgents = string.Empty;
    private string searchCities = string.Empty;
    private bool modalOpen = false;
    private bool loadingModal = false;
    private bool loadingSave = false;
    private string? modalHtml;
    private string? modalError;
    private string? modalAgentId;
    private string? modalSuccess;
    

    protected override void OnInitialized()
    {
        Registry.Changed += OnChanged;
        snapshot = Registry.GetSnapshot();

        _tick = new System.Timers.Timer(15000); // refresh every 15s for relative time
        _tick.Elapsed += (_, _) => InvokeAsync(StateHasChanged);
        _tick.AutoReset = true;
        _tick.Start();
    }

    private void OnChanged()
    {
        snapshot = Registry.GetSnapshot();
        InvokeAsync(StateHasChanged);
    }

    private async Task ShowDetailsAsync(string agentId, string cityId)
    {
        Console.WriteLine($"ShowDetailsAsync clicked for agent {agentId}, city {cityId}");
        modalOpen = true;
        loadingModal = true;
        modalError = null;
        modalHtml = null;
        modalAgentId = agentId;
        StateHasChanged();

        try
        {
            modalHtml = await Bridge.RequestCityDetailsAsync(agentId, cityId, TimeSpan.FromSeconds(10));
            Console.WriteLine($"Received modal HTML length: {modalHtml?.Length ?? 0}");
        }
        catch (Exception ex)
        {
            modalError = ex.Message;
            Console.WriteLine($"ShowDetailsAsync error: {ex.Message}");
        }
        finally
        {
            loadingModal = false;
            StateHasChanged();
        }
    }

    private async Task PerformSaveAsync()
    {
        if (string.IsNullOrWhiteSpace(modalAgentId)) return;
        Console.WriteLine($"PerformSaveAsync for agent {modalAgentId}");
        loadingSave = true;
        modalError = null;
        modalSuccess = null;
        StateHasChanged();
        try
        {
            var result = await Bridge.RequestSaveAsync(modalAgentId, null, TimeSpan.FromSeconds(10));
            if (!result.ok)
            {
                modalError = result.message ?? "Save failed";
            }
            else
            {
                modalSuccess = string.IsNullOrWhiteSpace(result.message) ? "Saved successfully." : result.message;
                StateHasChanged();
                await Task.Delay(1200);
                CloseModal();
                return;
            }
            Console.WriteLine($"Save result ok={result.ok}, message={result.message}");
        }
        catch (Exception ex)
        {
            modalError = ex.Message;
            Console.WriteLine($"PerformSaveAsync error: {ex.Message}");
        }
        finally
        {
            loadingSave = false;
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        modalOpen = false;
        modalHtml = null;
        modalError = null;
        modalAgentId = null;
        modalSuccess = null;
    }

    IEnumerable<AgentState> FilteredAgents => (snapshot?.Agents ?? Array.Empty<AgentState>())
        .Where(a => string.IsNullOrWhiteSpace(searchAgents)
            || a.Name.Contains(searchAgents, StringComparison.OrdinalIgnoreCase)
            || a.AgentId.Contains(searchAgents, StringComparison.OrdinalIgnoreCase))
        .OrderByDescending(a => a.LastSeen);

    IEnumerable<CityWeatherState> FilteredCities => (snapshot?.Cities ?? Array.Empty<CityWeatherState>())
        .Where(c => string.IsNullOrWhiteSpace(searchCities)
            || c.Name.Contains(searchCities, StringComparison.OrdinalIgnoreCase)
            || c.CityId.Contains(searchCities, StringComparison.OrdinalIgnoreCase))
        .OrderByDescending(c => c.LastUpdated ?? DateTimeOffset.MinValue);

    private static string TempClass(double t)
        => t switch { <= 0 => "bg-primary text-white", < 15 => "bg-info text-dark", < 25 => "bg-success",
                       < 32 => "bg-warning text-dark", _ => "bg-danger" };

    private DateTimeOffset? GetLatestUpdate()
    {
        if (snapshot is null) return null;
        var latestCity = snapshot.Cities.Select(c => c.LastUpdated ?? DateTimeOffset.MinValue).DefaultIfEmpty(DateTimeOffset.MinValue).Max();
        var latestAgent = snapshot.Agents.Select(a => a.LastSeen).DefaultIfEmpty(DateTimeOffset.MinValue).Max();
        var latest = latestCity > latestAgent ? latestCity : latestAgent;
        return latest == DateTimeOffset.MinValue ? null : latest;
    }

    private static string FormatTimeAgo(DateTimeOffset? time)
    {
        if (time is null) return "never";
        var delta = DateTimeOffset.UtcNow - time.Value.ToUniversalTime();
        if (delta.TotalSeconds < 10) return "just now";
        if (delta.TotalMinutes < 1) return $"{(int)delta.TotalSeconds}s ago";
        if (delta.TotalHours < 1) return $"{(int)delta.TotalMinutes}m ago";
        if (delta.TotalDays < 1) return $"{(int)delta.TotalHours}h ago";
        return $"{(int)delta.TotalDays}d ago";
    }

    public void Dispose()
    {
        Registry.Changed -= OnChanged;
        _tick?.Stop();
        _tick?.Dispose();
    }
}